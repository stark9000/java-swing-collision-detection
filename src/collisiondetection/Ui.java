/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package collisiondetection;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author saliya
 */
public class Ui extends javax.swing.JFrame implements KeyListener {

    private int X = 1;
    private int Y = 1;
    private Dimension FRAME_SIZE;
    private Rectangle R1;
    private Rectangle R2;

    /**
     * Creates new form Ui
     */
    public Ui() {
        initComponents();
        addKeyListener(this);
        FRAME_SIZE = this.getContentPane().getSize();
        updateG();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("collision detection");
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Ui().setVisible(true);
        });
    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:
                if (Y < 1) {
                    return;
                }
                Y--;
                super.repaint();
                break;
            case KeyEvent.VK_DOWN:
                if (Y > FRAME_SIZE.getHeight() - 90) {
                    return;
                }
                Y++;
                super.repaint();
                break;
            case KeyEvent.VK_LEFT:
                if (X < 1) {
                    return;
                }
                X--;
                super.repaint();
                break;
            case KeyEvent.VK_RIGHT:
                if (X > FRAME_SIZE.getWidth() - 66) {
                    return;
                }
                X++;
                super.repaint();
                break;
            default:
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(Graphics g) {
        super.paint(g);

        Graphics2D G = (Graphics2D) this.getContentPane().getGraphics();

        G.setColor(Color.RED);
        R1 = new Rectangle(X, Y, 50, 50);
        G.fillRect(X, Y, 50, 50);

        G.setColor(Color.BLUE);
        R2 = new Rectangle(((int) FRAME_SIZE.getWidth() / 2) - 100 / 2, ((int) FRAME_SIZE.getHeight() / 2) - 150 / 2, 100, 100);
        G.fillRect(((int) FRAME_SIZE.getWidth() / 2) - 100 / 2, ((int) FRAME_SIZE.getHeight() / 2) - 150 / 2, 100, 100);

        if (R1.intersects(R2)) {
            G.setColor(Color.BLACK);
            G.setFont(new Font("default", Font.BOLD, 16));
            G.drawString("collision !", ((int) FRAME_SIZE.getWidth() / 2) - 100 / 2, 20);
        } else {

        }
    }

    public void updateG() {
        Thread GT = new Thread(() -> {
            for (;;) {
                try {
                    FRAME_SIZE = this.getSize();
                    repaint();
                    Thread.sleep(5);
                } catch (InterruptedException ex) {

                }
            }
        });
        GT.start();
    }
}
